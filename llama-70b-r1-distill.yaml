# Config for multi-device full finetuning in full_finetune_distributed.py
# using a Llama3.1 8B Instruct model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Meta-Llama-3.1-8B-Instruct --output-dir /tmp/Meta-Llama-3.1-8B-Instruct --ignore-patterns "original/consolidated.00.pth"
#
# To launch on 4 devices, run the following command from root:
#   tune run --nproc_per_node 4 full_finetune_distributed --config llama3_1/8B_full
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nproc_per_node 4 full_finetune_distributed --config llama3_1/8B_full checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works best when the model is being fine-tuned on 2+ GPUs.
# Single device full finetuning requires more memory optimizations. It's
# best to use 8B_full_single_device.yaml for those cases


output_dir: /workspace/llama_70b_r1_distill_code_and_math # /tmp may be deleted by your system. Change it to your preference.

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama_r1.llama3_r1_tokenizer
  tokenizer_path: /workspace/llama_70b_r1

# Dataset
dataset:
  _component_: torchtune.datasets.chat_dataset
  source: justus27/lightr1-codeforces
  conversation_column: messages
  conversation_style: openai
  split: train
  packed: False  # True increases speed
seed: null
shuffle: True

# Model Arguments
model:
  _component_: torchtune.models.llama3_1.llama3_1_70b

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: /workspace/llama_70b_r1
  checkpoint_files: [
    model-00001-of-000017.safetensors,
    model-00002-of-000017.safetensors,
    model-00003-of-000017.safetensors,
    model-00004-of-000017.safetensors,
    model-00005-of-000017.safetensors,
    model-00006-of-000017.safetensors,
    model-00007-of-000017.safetensors,
    model-00008-of-000017.safetensors,
    model-00009-of-000017.safetensors,
    model-00010-of-000017.safetensors,
    model-00011-of-000017.safetensors,
    model-00012-of-000017.safetensors,
    model-00013-of-000017.safetensors,
    model-00014-of-000017.safetensors,
    model-00015-of-000017.safetensors,
    model-00016-of-000017.safetensors,
    model-00017-of-000017.safetensors
  ]
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: LLAMA3
resume_from_checkpoint: False

# Fine-tuning arguments
batch_size: 1
epochs: 8

optimizer:
  _component_: torch.optim.AdamW
  lr: 1e-5
  fused: True
loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss
max_steps_per_epoch: null
fsdp_cpu_offload: True
clip_grad_norm: null
compile: False  # torch.compile the model + loss, True increases speed + decreases memory
optimizer_in_bwd: False  # True saves memory. Requires gradient_accumulation_steps=1
gradient_accumulation_steps: 1  # Use to increase effective batch size

lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 15

# Training env
device: cuda

# Memory management
enable_activation_checkpointing: True  # True reduces memory
enable_activation_offloading: True  # True reduces memory
custom_sharded_layers: ['tok_embeddings', 'output']  # Layers to shard separately (useful for large vocab size models). Lower Memory, but lower speed.

# Reduced precision
dtype: bf16

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.WandBLogger
  project: torchtune
log_every_n_steps: 1
log_peak_memory_stats: True


# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 3
  active_steps: 2
  num_cycles: 1
