# Config for multi-device full finetuning in full_finetune_distributed.py
# using a Qwen2.5 1.5B model
#
# This config assumes that you've run the following command before launching:
#   tune download Qwen/Qwen2.5-1.5B-Instruct --output-dir /tmp/Qwen2.5-1.5B-Instruct
#
# To launch on 2 devices, run the following command from root:
#   tune run --nproc_per_node 2 full_finetune_distributed --config qwen2_5/1.5B_full
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training:
#   tune run --nproc_per_node 2 full_finetune_distributed --config qwen2_5/1.5B_full checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config is for fine-tuning on 2+ GPUs.

output_dir: /alloc/data/qwen-7b-instruct-r1-distill-stage1 # /tmp may be deleted by your system. Change it to your preference.

# Model arguments
model:
  _component_: torchtune.models.qwen2_5.qwen2_5_7b_instruct

# Tokenizer
tokenizer:
  _component_: torchtune.models.qwen2_5.qwen2_5_tokenizer
  path: /alloc/data/torch-tune/qwen-2.5/vocab.json
  merges_file: /alloc/data/torch-tune/qwen-2.5/merges.txt
  max_seq_len: 20000

# Checkpointer
checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: /alloc/data/torch-tune/qwen-2.5
  checkpoint_files: [
    model-00001-of-00004.safetensors,
    model-00002-of-00004.safetensors,
    model-00003-of-00004.safetensors,
    model-00004-of-00004.safetensors,
  ]
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: QWEN2
resume_from_checkpoint: False

# Dataset
dataset:
  _component_: torchtune.datasets.chat_dataset
  source: justus27/light-r1-stage-2-sft
  conversation_column: messages
  conversation_style: openai
  split: train
  packed: False  # True increases speed
seed: null
shuffle: True

# Fine-tuning arguments
epochs: 5
max_steps_per_epoch: null
fsdp_cpu_offload: False
batch_size: 4
gradient_accumulation_steps: 3  # Use to increase effective batch size
optimizer:
  _component_: torch.optim.AdamW
  fused: False
  lr: 4e-5
optimizer_in_bwd: False  # True saves memory. Requires gradient_accumulation_steps=1
loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss

lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 100

metric_logger:
  _component_: torchtune.training.metric_logging.WandBLogger
  project: torchtune

# Training env
device: cuda

# Memory management / performance
enable_activation_checkpointing: True  # True reduces memory
enable_activation_offloading: False  # True reduces memory
dtype: bf16
clip_grad_norm: null
compile: True  # torch.compile the model + loss, True increases speed + decreases memory

log_every_n_steps: 1
log_peak_memory_stats: True


# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 3
  active_steps: 2
  num_cycles: 1
